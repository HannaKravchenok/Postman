{
	"info": {
		"_postman_id": "cd642a2f-675c-47e1-aa06-1988d0b59d14",
		"name": "HW_Postman_2_Kravchenok",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20476798"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос. => в url ввела http://162.55.220.72:5005/first\r",
							"// 2. Статус код 200 => выбираем Status code: Coge is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Проверить, что в body приходит правильный string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос. => в url http://162.55.220.72:5005/user_info_3\r",
							"// 2. Статус код 200 => выбираем Status code: Coge is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name = jsonData.name\r",
							"let name_1 = \"Anna\"\r",
							"pm.test(\"name\", function () {\r",
							"        pm.expect(name).to.eql(name_1);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age = jsonData.age\r",
							"let age_1 = \"36\"\r",
							"pm.test(\"age\", function () {\r",
							"        pm.expect(age).to.eql(age_1);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary = jsonData.salary\r",
							"let salary_1 = \"1000\"\r",
							"pm.test(\"salary\", function () {\r",
							"        pm.expect(salary).to.eql(+salary_1);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_req\", function () {\r",
							"        pm.expect(name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_req\", function () {\r",
							"        pm.expect(age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_req\", function () {\r",
							"        pm.expect(salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let Family = jsonData.family\r",
							"console.log(Family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"salary_1.5 year\", function () {\r",
							"        pm.expect(jsonData.family[\"u_salary_1_5_year\"]).to.eql(+req.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// перейти во вкладку Body - from-data в столбце Value напротив 'salary' написать {{Salary}}\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// в столбце Value напротив 'age' написать {{Age}}\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// в столбце Value напротив 'name' написать {{Name}}\r",
							"\r",
							"// 4. Отправить запрос.=> в url http://162.55.220.72:5005/user_info_2\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"let item_1 =  {\"start_qa_salary\": 1000}\r",
							"pm.test(\"start_qa_salary\", () => {\r",
							"    pm.expect(jsonData).to.deep.include(item_1);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"let item_4 =  { \"qa_salary_after_6_months\": 2000}\r",
							"pm.test(\"qa_salary_after_6_months\", () => {\r",
							"    pm.expect(jsonData).to.deep.include(item_4);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"let item_2 =  {\"qa_salary_after_12_months\": 2700.0}\r",
							"pm.test(\"qa_salary_after_12_months\", () => {\r",
							"  \r",
							"  pm.expect(jsonData).to.deep.include(item_2);\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"let item_3 =  {\"qa_salary_after_1.5_year\": 3300.0}\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(jsonData).to.deep.include(item_3);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"let item_6 = { \"qa_salary_after_3.5_years\": 3800.0}\r",
							"pm.test(\"qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(jsonData).to.deep.include(item_6);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"let item_5 =  {  \"person\": {\r",
							"        \"u_age\": 36,\r",
							"        \"u_name\": [\r",
							"            \"Anna\",\r",
							"            1000,\r",
							"            36\r",
							"        ],\r",
							"        \"u_salary_5_years\": 4200.0\r",
							"    },}\r",
							"pm.test(\"person\", () => {\r",
							"  \r",
							"  pm.expect(jsonData).to.deep.include(item_5);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"ЗП_старт\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП_через_6_мес\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП_через_12_мес\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП_через_1.5_года\", function () {\r",
							"    \r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"ЗП_через_3.5_года\", function () {\r",
							"    \r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Пункт_19\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Пункт_20\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Пункт_21\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"const obj = jsonData.person;\r",
							"for(let el in obj) {console.log(el)}\r",
							"// for(let el in obj) {console.log(`key: ${el}, value: ${obj[el]}`)}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.=> в url http://162.55.220.72:5005/object_info_3\r",
							"// 2. Статус код 200 => выбираем Status code: Coge is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name = jsonData.name\r",
							"let name_r = req.name\r",
							"pm.test(\"Name\", function () {\r",
							"        pm.expect(name).to.eql(name_r);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age = jsonData.age\r",
							"let age_r = req.age\r",
							"pm.test(\"Age\", function () {\r",
							"        pm.expect(age).to.eql(age_r);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary = jsonData.salary\r",
							"let salary_r = req.salary\r",
							"pm.test(\"Salary\", function () {\r",
							"        pm.expect(salary).to.eql(+salary_r);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let Family = jsonData.family\r",
							"console.log(Family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog_name\", function () {  \r",
							"    pm.expect(jsonData.family.pets.dog).to.haveOwnProperty('name');   \r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog_age\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).to.haveOwnProperty('age');   \r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_Luky\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql( 'Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_4\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql( 4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anna&age=36&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.=> в url http://162.55.220.72:5005/object_info_3\r",
							"// 2. Статус код 200 => выбираем Status code: Coge is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name = jsonData.name\r",
							"let name_r = req.name\r",
							"pm.test(\"Name\", function () {\r",
							"        pm.expect(name).to.eql(name_r);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age = jsonData.age\r",
							"let age_r = req.age\r",
							"pm.test(\"Age\", function () {\r",
							"        pm.expect(age).to.eql(+age_r);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let Salary_req = req.salary\r",
							"console.log(Salary_req)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let Salary = jsonData.salary\r",
							"console.log(Salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let Salary_0 = jsonData.salary[0]\r",
							"console.log(Salary_0)\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let Salary_1 = jsonData.salary[1]\r",
							"console.log(Salary_1)\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let Salary_2 = jsonData.salary[2]\r",
							"console.log(Salary_2)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary_0\", function () {\r",
							"        pm.expect(Salary_0).to.eql(+Salary_req);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_1\", function () {\r",
							"        pm.expect(+Salary_1).to.eql(+Salary_req*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2\", function () {\r",
							"        pm.expect(+Salary_2).to.eql(+Salary_req*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// в меню слева выбирать Environment - New Environment - HW_Postman_2 В строку Variable внести название переменной name, в Current value - Anna\r",
							"\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// в меню слева выбирать Environment - HW_Postman_2. В строку Variable внести название переменной age, в Current value - 36\r",
							"\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// в меню слева выбирать Environment - HW_Postman_2. В строку Variable внести название переменной salary, в Current value - 1000\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// вернуться в коллекции, в object_info_4, во вкладку Tests, прописать код:\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"// вернуться в коллекции, в object_info_4, во вкладку Tests, прописать код:\r",
							"pm.environment.set(\"age\", age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"// вернуться в коллекции, в object_info_4, во вкладку Tests, прописать код:\r",
							"pm.environment.set(\"salary\", Salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(function(s){\r",
							"       console.log(s);\r",
							"   });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Anna&age=36&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}